-- Altera Memory Initialization File (MIF)

DEPTH = 1024;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..3FF] : 0000;  -- Default to NOP

           000 : 056C;  -- 	LOAD    Zero
           001 : 4C83;  -- 	OUT     LVELCMD     ; Stop motors
           002 : 4C8B;  -- 	OUT     RVELCMD
           003 : 4CB2;  -- 	OUT     SONAREN     ; Disable sonar (optional)
           004 : 4043;  -- 	CALL    SetupI2C    ; Configure the I2C
           005 : 402C;  -- 	CALL    BattCheck   ; Get battery voltage (and end if too low).
           006 : 4C05;  -- 	OUT     SSEG2       ; Display batt voltage on SS
           007 : 056C;  -- 	LOAD    Zero
           008 : 3417;  -- 	ADDI    &H17        ; arbitrary reminder to toggle SW17
           009 : 4C04;  -- 	OUT     SSEG1
           00A : 4803;  -- 	IN      XIO         ; contains KEYs and SAFETY
           00B : 2588;  -- 	AND     StartMask   ; mask with 0x10100 : KEY3 and SAFETY
           00C : 2D84;  -- 	XOR     Mask4       ; KEY3 is active low; invert SAFETY to match
           00D : 1C0A;  -- 	JPOS    WaitForUser ; one of those is not ready, so try again 
           00E : 4CC3;  -- 	OUT     RESETODO    ; reset odometry in case wheels moved after programming
           00F : 414C;  -- 	CALL	FORGETME	; Reset data associated with bot and base station
           010 : 4059;  -- 	CALL	ImAlive		; Let base station know I exist
           011 : 4066;  -- 	CALL	REPDUTY		; Let it know that I'm ready for duty
           012 : 056C;  -- 	LOAD	Zero
           013 : 4CC3;  -- 	OUT     RESETODO
           014 : 4079;  -- 	CALL	REQJOB		; Get Job #N and do it
           015 : 0561;  -- 	LOAD	N
           016 : 116D;  -- 	SUB		One			; Decrement N
           017 : 0961;  -- 	STORE	N			; Store new N
           018 : 1C14;  -- 	JPOS	DoJob		; Do all jobs until 0
           019 : 4127;  -- 	CALL	GOHOME		; After all jobs, go home
           01A : 4072;  -- 	CALL	CLKOUT		; Clock out of base station
           01B : 140A;  -- 	JUMP	WaitForUser
           01C : 4C02;  -- 	OUT     TIMER
           01D : 4802;  -- 	IN      TIMER
           01E : 4C01;  -- 	OUT     LEDS
           01F : 37F6;  -- 	ADDI    -10
           020 : 181D;  -- 	JNEG    Wloop
           021 : 4400;  -- 	RETURN
           022 : 4C02;  -- 	OUT     TIMER
           023 : 056E;  -- 	LOAD	Two			; 360*2 Hz
           024 : 4C0A;  -- 	OUT		BEEP
           025 : 4802;  -- 	IN      TIMER
           026 : 4C01;  -- 	OUT     LEDS
           027 : 37E2;  -- 	ADDI    -30
           028 : 1823;  -- 	JNEG    Wloop2
           029 : 056C;  -- 	LOAD	Zero
           02A : 4C0A;  -- 	OUT		BEEP
           02B : 4400;  -- 	RETURN
           02C : 404A;  -- 	CALL    GetBattLvl 
           02D : 118D;  -- 	SUB     MinBatt
           02E : 1831;  -- 	JNEG    DeadBatt
           02F : 0D8D;  -- 	ADD     MinBatt     ; get original value back
           030 : 4400;  -- 	RETURN
           031 : 0570;  -- 	LOAD    Four
           032 : 4C0A;  -- 	OUT     BEEP        ; start beep sound
           033 : 404A;  -- 	CALL    GetBattLvl  ; get the battery level
           034 : 4C04;  -- 	OUT     SSEG1       ; display it everywhere
           035 : 4C05;  -- 	OUT     SSEG2
           036 : 4C06;  -- 	OUT     LCD
           037 : 056C;  -- 	LOAD    Zero
           038 : 37FF;  -- 	ADDI    -1          ; 0xFFFF
           039 : 4C01;  -- 	OUT     LEDS        ; all LEDs on
           03A : 4C07;  -- 	OUT     GLEDS
           03B : 401C;  -- 	CALL    Wait1       ; 1 second
           03C : 056C;  -- 	Load    Zero
           03D : 4C0A;  -- 	OUT     BEEP        ; stop beeping
           03E : 056C;  -- 	LOAD    Zero
           03F : 4C01;  -- 	OUT     LEDS        ; LEDs off
           040 : 4C07;  -- 	OUT     GLEDS
           041 : 401C;  -- 	CALL    Wait1       ; 1 second
           042 : 1431;  -- 	JUMP    DeadBatt    ; repeat forever
           043 : 058E;  -- 	LOAD    I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           044 : 4C90;  -- 	OUT     I2C_CMD     ; to I2C_CMD register
           045 : 056C;  -- 	LOAD    Zero        ; 0x0000 (A/D port 0, no increment)
           046 : 4C91;  -- 	OUT     I2C_DATA    ; to I2C_DATA register
           047 : 4C92;  -- 	OUT     I2C_RDY     ; start the communication
           048 : 4050;  -- 	CALL    BlockI2C    ; wait for it to finish
           049 : 4400;  -- 	RETURN
           04A : 058F;  -- 	LOAD    I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           04B : 4C90;  -- 	OUT     I2C_CMD     ; to I2C_CMD
           04C : 4C92;  -- 	OUT     I2C_RDY     ; start the communication
           04D : 4050;  -- 	CALL    BlockI2C    ; wait for it to finish
           04E : 4891;  -- 	IN      I2C_DATA    ; get the returned data
           04F : 4400;  -- 	RETURN
           050 : 4892;  -- 	IN      I2C_RDY;   ; Read busy signal
           051 : 1C50;  -- 	JPOS    BlockI2C    ; If not 0, try again
           052 : 4400;  -- 	RETURN              ; Else return
           053 : 056C;  -- 	LOAD    Zero
           054 : 4C83;  -- 	OUT     LVELCMD
           055 : 4C8B;  -- 	OUT     RVELCMD
           056 : 0552;  -- 	LOAD	ErrorVal
           057 : 4C04;  -- 	OUT		SSEG1
           058 : 1453;  -- 	JUMP 	ErrorNow
           059 : 056D;  -- 	LOAD	One
           05A : 4C04;  -- 	OUT		SSEG1
           05B : 0553;  -- 	LOAD 	TSENDALV    ; Load value to send
           05C : 4C98;  -- 	OUT 	UART		; Send to UART
           05D : 4148;  -- 	CALL	INUART0
           05E : 4141;  -- 	CALL	INUART1		; Receive response from UART
           05F : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           060 : 056E;  -- 	LOAD	Two
           061 : 4C04;  -- 	OUT		SSEG1
           062 : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           063 : 056E;  -- 	LOAD	Two
           064 : 4C05;  -- 	OUT		SSEG2
           065 : 4400;  -- 	RETURN
           066 : 056F;  -- 	LOAD	Three
           067 : 4C04;  -- 	OUT		SSEG1
           068 : 0556;  -- 	LOAD 	SNDDUTY		; Load value to send
           069 : 4C98;  -- 	OUT 	UART		; Send to UART
           06A : 4148;  -- 	CALL	INUART0
           06B : 4141;  -- 	CALL	INUART1		; Receive from UART
           06C : 0957;  -- 	STORE	RDUTY		; Store response
           06D : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           06E : 0570;  -- 	LOAD	Four
           06F : 4C04;  -- 	OUT		SSEG1
           070 : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           071 : 4400;  -- 	RETURN
           072 : 0558;  -- 	LOAD	CLKVAL		; Load value to send
           073 : 4C98;  -- 	OUT		UART		; Send to UART
           074 : 4141;  -- 	CALL	INUART1		; Receive data from UART
           075 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           076 : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           077 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           078 : 4400;  -- 	RETURN
           079 : 0571;  -- 	LOAD	Five
           07A : 4C04;  -- 	OUT		SSEG1
           07B : 0561;  -- 	LOAD	N
           07C : 4C05;  -- 	OUT		SSEG2
           07D : 0559;  -- 	LOAD	REQVAL		; Load value to send
           07E : 0D61;  -- 	ADD		N			; Add specific job number
           07F : 4C98;  -- 	OUT		UART		; Send to UART
           080 : 4148;  -- 	CALL	INUART0
           081 : 4141;  -- 	CALL	INUART1		; Receive X1 from UART
           082 : 0962;  -- 	STORE	X1			; Store X1
           083 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           084 : 4141;  -- 	CALL	INUART1		; Receive Y1 from UART
           085 : 0963;  -- 	STORE	Y1			; Store Y1
           086 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           087 : 4141;  -- 	CALL	INUART1		; Receive X2 from UART
           088 : 0964;  -- 	STORE	X2			; Store X2
           089 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           08A : 4141;  -- 	CALL	INUART1		; Receive Y2 from UART
           08B : 0965;  -- 	STORE 	Y2			; Store Y2
           08C : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           08D : 0572;  -- 	LOAD	Six
           08E : 4C04;  -- 	OUT		SSEG1
           08F : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           090 : 0573;  -- 	LOAD	Seven
           091 : 4C04;  -- 	OUT		SSEG1
           092 : 0579;  -- 	LOAD	FFast
           093 : 096A;  -- 	STORE	DirSpeed
           094 : 0562;  -- 	LOAD	X1
           095 : 4C04;  -- 	OUT		SSEG1
           096 : 1166;  -- 	SUB		CurX
           097 : 1C9B;  -- 	JPOS	GETDISTX
           098 : 20AA;  -- 	JZERO	PICKX
           099 : 057A;  -- 	LOAD	RFast
           09A : 096A;  -- 	STORE	DirSpeed
           09B : 0562;  -- 	LOAD	X1
           09C : 116D;  -- 	SUB		One
           09D : 096B;  -- 	STORE	Temp
           09E : 058C;  -- 	LOAD	TwoFeet
           09F : 516B;  -- 	MULT	Temp		
           0A0 : 0968;  -- 	STORE	MovX
           0A1 : 056A;  -- 	LOAD	DirSpeed
           0A2 : 4C83;  -- 	OUT		LVELCMD
           0A3 : 4C8B;  -- 	OUT		RVELCMD
           0A4 : 48C0;  -- 	IN		XPOS
           0A5 : 095A;  -- 	STORE	CXPOS
           0A6 : 0568;  -- 	LOAD	MovX
           0A7 : 115A;  -- 	SUB		CXPOS
           0A8 : 4C05;  -- 	OUT		SSEG2
           0A9 : 1CA1;  -- 	JPOS	XMOVE
           0AA : 056C;  -- 	LOAD	ZERO
           0AB : 056C;  -- 	LOAD	ZERO
           0AC : 4100;  -- 	CALL	STOP		; Stop the bot
           0AD : 0562;  -- 	LOAD	X1			; Update X value
           0AE : 0966;  -- 	STORE	CurX		; Store new X value
           0AF : 4104;  -- 	CALL	Rotate90	; Rotate 90 anticlockwise
           0B0 : 4100;  -- 	CALL	STOP		; Stop the bot
           0B1 : 0574;  -- 	LOAD	Eight
           0B2 : 4C04;  -- 	OUT		SSEG1
           0B3 : 0579;  -- 	LOAD	FFast
           0B4 : 096A;  -- 	STORE	DirSpeed
           0B5 : 0563;  -- 	LOAD	Y1
           0B6 : 4C04;  -- 	OUT		SSEG1
           0B7 : 1167;  -- 	SUB		CurY
           0B8 : 1CBC;  -- 	JPOS	GETDISTY
           0B9 : 20CB;  -- 	JZERO	PICKY
           0BA : 057A;  -- 	LOAD	RFast
           0BB : 096A;  -- 	STORE	DirSpeed
           0BC : 0563;  -- 	LOAD	Y1
           0BD : 116D;  -- 	SUB		One
           0BE : 096B;  -- 	STORE	Temp
           0BF : 058C;  -- 	LOAD	TwoFeet
           0C0 : 516B;  -- 	MULT	Temp	
           0C1 : 0969;  -- 	STORE	MovY
           0C2 : 056A;  -- 	LOAD	DirSpeed
           0C3 : 4C83;  -- 	OUT		LVELCMD
           0C4 : 4C8B;  -- 	OUT		RVELCMD
           0C5 : 48C1;  -- 	IN		YPOS
           0C6 : 095B;  -- 	STORE	CYPOS
           0C7 : 0569;  -- 	LOAD	MovY
           0C8 : 115A;  -- 	SUB		CXPOS
           0C9 : 4C05;  -- 	OUT		SSEG2
           0CA : 1CC2;  -- 	JPOS	YMOVE
           0CB : 4100;  -- 	CALL	STOP		; Stop the bot
           0CC : 0563;  -- 	LOAD	Y1			; Update Y value
           0CD : 0967;  -- 	STORE	CurY		; Store new Y value
           0CE : 4100;  -- 	CALL	STOP		; Stop the bot
           0CF : 4116;  -- 	CALL	PICKUP		; Tell base station, job has been picked up
           0D0 : 0575;  -- 	LOAD	Nine
           0D1 : 4C04;  -- 	OUT		SSEG1
           0D2 : 0579;  -- 	LOAD	FFast
           0D3 : 096A;  -- 	STORE	DirSpeed
           0D4 : 0565;  -- 	LOAD	Y2
           0D5 : 4C04;  -- 	OUT		SSEG1
           0D6 : 1167;  -- 	SUB		CurY
           0D7 : 1CDB;  -- 	JPOS	GETDIST2Y
           0D8 : 20EB;  -- 	JZERO	DROPY
           0D9 : 057A;  -- 	LOAD	RFast
           0DA : 096A;  -- 	STORE	DirSpeed
           0DB : 0565;  -- 	LOAD	Y2
           0DC : 116D;  -- 	SUB		One
           0DD : 096B;  -- 	STORE	Temp
           0DE : 058C;  -- 	LOAD	TwoFeet
           0DF : 516B;  -- 	MULT	Temp	
           0E0 : 0969;  -- 	STORE	MovY
           0E1 : 056A;  -- 	LOAD	DirSpeed
           0E2 : 4C83;  -- 	OUT		LVELCMD
           0E3 : 4C8B;  -- 	OUT		RVELCMD
           0E4 : 48C1;  -- 	IN		YPOS
           0E5 : 095C;  -- 	STORE	DYPOS
           0E6 : 0569;  -- 	LOAD	MovY
           0E7 : 115C;  -- 	SUB		DYPOS
           0E8 : 4C05;  -- 	OUT		SSEG2
           0E9 : 1CE1;  -- 	JPOS	YMOVE2
           0EA : 18E1;  -- 	JNEG	YMOVE2
           0EB : 4100;  -- 	CALL	STOP		; Stop the bot
           0EC : 0565;  -- 	LOAD	Y2			; Update Y value
           0ED : 0967;  -- 	STORE	CurY		; Store new Y value
           0EE : 410E;  -- 	CALL	Rotate270	; Rotate 270 anticlockwise
           0EF : 4100;  -- 	CALL	STOP		; Stop the bot
           0F0 : 0576;  -- 	LOAD	Ten
           0F1 : 4C04;  -- 	OUT		SSEG1
           0F2 : 057A;  -- 	LOAD	RFast
           0F3 : 4C83;  -- 	OUT		LVELCMD
           0F4 : 4C8B;  -- 	OUT		RVELCMD
           0F5 : 0566;  -- 	LOAD	CurX
           0F6 : 116D;  -- 	SUB		One
           0F7 : 20FA;  -- 	JZERO	DROPX
           0F8 : 48C0;  -- 	IN		XPOS
           0F9 : 1CF2;  -- 	JPOS	XMOVE2
           0FA : 4100;  -- 	CALL	STOP		; Stop the bot
           0FB : 056D;  -- 	LOAD	One		    ; Update X value
           0FC : 0966;  -- 	STORE	CurX		; Store new X value
           0FD : 4100;  -- 	CALL	STOP		; Stop the bot
           0FE : 411F;  -- 	CALL	DROPOFF		; Tell base station, job has been dropped off
           0FF : 4400;  -- 	RETURN
           100 : 056C;  -- 	LOAD	Zero
           101 : 4C83;  -- 	OUT		LVELCMD
           102 : 4C8B;  -- 	OUT		RVELCMD
           103 : 4400;  -- 	RETURN
           104 : 0578;  -- 	LOAD	RSlow
           105 : 4C83;  -- 	OUT		LVELCMD
           106 : 0577;  -- 	LOAD	FSlow
           107 : 4C8B;  -- 	OUT		RVELCMD
           108 : 48C2;  -- 	IN		THETA
           109 : 4C04;  -- 	OUT		SSEG1
           10A : 117C;  -- 	SUB		Deg90
           10B : 4C05;  -- 	OUT		SSEG2
           10C : 1904;  -- 	JNEG 	Rotate90
           10D : 4400;  -- 	RETURN
           10E : 0578;  -- 	LOAD	RSlow
           10F : 4C83;  -- 	OUT		LVELCMD
           110 : 0577;  -- 	LOAD	FSlow
           111 : 4C8B;  -- 	OUT		RVELCMD
           112 : 48C2;  -- 	IN		THETA
           113 : 117E;  -- 	SUB		Deg270
           114 : 190E;  -- 	JNEG 	Rotate270
           115 : 4400;  -- 	RETURN
           116 : 055D;  -- 	LOAD	PICKVAL		; Load value to send
           117 : 0D61;  -- 	ADD		N			; Add specific job number
           118 : 4C98;  -- 	OUT		UART		; Send to UART
           119 : 4148;  -- 	CALL	INUART0
           11A : 4141;  -- 	CALL	INUART1		; Receive response from UART
           11B : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           11C : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           11D : 4022;  -- 	CALL	BeepWait3	; Wait and beep for 3 seconds
           11E : 4400;  -- 	RETURN
           11F : 055E;  -- 	LOAD	DROPVAL		; Load value to send
           120 : 4C98;  -- 	OUT		UART		; Send to UART
           121 : 4148;  -- 	CALL	INUART0
           122 : 4141;  -- 	CALL	INUART1		; Receive response from UART
           123 : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           124 : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           125 : 4022;  -- 	CALL	BeepWait3	; Wait and beep for 3 seconds
           126 : 4400;  -- 	RETURN
           127 : 057A;  -- 	LOAD	RFast
           128 : 4C83;  -- 	OUT		LVELCMD
           129 : 4C8B;  -- 	OUT		RVELCMD
           12A : 0566;  -- 	LOAD	CurX
           12B : 116D;  -- 	SUB		One
           12C : 212F;  -- 	JZERO	HOMEX
           12D : 48C0;  -- 	IN		XPOS
           12E : 1D27;  -- 	JPOS	HOMEMOVEX
           12F : 4100;  -- 	CALL	STOP		; Stop the bot
           130 : 056D;  -- 	LOAD	One			; Update X value
           131 : 0966;  -- 	STORE	CurX		; Store new X value
           132 : 4104;  -- 	CALL	Rotate90	; Rotate 90 anticlockwise
           133 : 4100;  -- 	CALL	STOP		; Stop the bot
           134 : 057A;  -- 	LOAD	RFast
           135 : 4C83;  -- 	OUT		LVELCMD
           136 : 4C8B;  -- 	OUT		RVELCMD
           137 : 0567;  -- 	LOAD	CurY
           138 : 116D;  -- 	SUB		One
           139 : 213C;  -- 	JZERO	HOMEY
           13A : 48C1;  -- 	IN		YPOS
           13B : 1D27;  -- 	JPOS	HOMEMOVEX
           13C : 4100;  -- 	CALL	STOP		; Stop the bot
           13D : 0563;  -- 	LOAD	Y1			; Update Y value
           13E : 0967;  -- 	STORE	CurY		; Store new Y value
           13F : 4100;  -- 	CALL	STOP		; Stop the bot
           140 : 4400;  -- 	RETURN
           141 : 5400;  -- 	USTB	0
           142 : 37FF;  -- 	ADDI	-1
           143 : 1941;  -- 	JNEG	INUART1
           144 : 1D41;  -- 	JPOS	INUART1
           145 : 4898;  -- 	IN		UART
           146 : 255F;  -- 	AND		FIXIN
           147 : 4400;  -- 	RETURN
           148 : 5400;  -- 	USTB	0
           149 : 1948;  -- 	JNEG	INUART0
           14A : 1D48;  -- 	JPOS	INUART0
           14B : 4400;  -- 	RETURN
           14C : 0560;  -- 	LOAD	FRGTVAL		; Load value to send
           14D : 4C98;  -- 	OUT		UART		; Send to UART
           14E : 4141;  -- 	CALL	INUART1		; Receive data from UART
           14F : 4148;  -- 	CALL	INUART0		; Wait until data is cleared
           150 : 4141;  -- 	CALL	INUART1		; Receive checksum from UART
           151 : 4400;  -- 	RETURN	
           152 : 00FF;  -- ErrorVal:	DW	&HFF
           153 : 000B;  -- TSENDALV:   DW &H0B
           154 : 000F;  -- TESTN:	  	DW &H0F
           155 : 0000;  -- TESTALV:  	DW 0
           156 : 0010;  -- SNDDUTY:	DW &H10		; CHANGE TO &H10 FOR ACTUAL JOBS --- TEST JOBS RANGE FROM 80 to 84
           157 : 0000;  -- RDUTY:		DW 0
           158 : 0060;  -- CLKVAL:		DW &H60
           159 : 0020;  -- REQVAL:		DW &H20
           15A : 0000;  -- CXPOS:		DW 0
           15B : 0000;  -- CYPOS:		DW 0
           15C : 0000;  -- DYPOS:		DW	0
           15D : 0030;  -- PICKVAL:	DW &H30
           15E : 0040;  -- DROPVAL:	DW &H40
           15F : 00FF;  -- FIXIN:		DW &HFF
           160 : 0090;  -- FRGTVAL:	DW &H90
           161 : 0008;  -- N:		  DW 8
           162 : 0000;  -- X1:		  DW 0
           163 : 0000;  -- Y1:		  DW 0
           164 : 0000;  -- X2:		  DW 0
           165 : 0000;  -- Y2:		  DW 0
           166 : 0001;  -- CurX:	  DW 1
           167 : 0001;  -- CurY:	  DW 1
           168 : 0000;  -- MovX:	  DW 0
           169 : 0000;  -- MovY:	  DW 0
           16A : 0000;  -- DirSpeed: DW 0
           16B : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be helpful
           16C : 0000;  -- Zero:     DW 0
           16D : 0001;  -- One:      DW 1
           16E : 0002;  -- Two:      DW 2
           16F : 0003;  -- Three:    DW 3
           170 : 0004;  -- Four:     DW 4
           171 : 0005;  -- Five:     DW 5
           172 : 0006;  -- Six:      DW 6
           173 : 0007;  -- Seven:    DW 7
           174 : 0008;  -- Eight:    DW 8
           175 : 0009;  -- Nine:     DW 9
           176 : 000A;  -- Ten:      DW 10
           177 : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest value that will move at all
           178 : FF9C;  -- RSlow:    DW -100
           179 : 01F4;  -- FFast:    DW 500       ; 500 is a fair clip (511 is max)
           17A : FE0C;  -- RFast:    DW -500
           17B : 03E8;  -- Pedro:	  DW 1000
           17C : 00AA;  -- Deg90:    DW 170
           17D : 0140;  -- Deg180:   DW 320
           17E : 0208;  -- Deg270:   DW 520
           17F : 02BC;  -- Deg360:	  DW 700
           180 : 0001;  -- Mask0:    DW &B00000001
           181 : 0002;  -- Mask1:    DW &B00000010
           182 : 0004;  -- Mask2:    DW &B00000100
           183 : 0008;  -- Mask3:    DW &B00001000
           184 : 0010;  -- Mask4:    DW &B00010000
           185 : 0020;  -- Mask5:    DW &B00100000
           186 : 0040;  -- Mask6:    DW &B01000000
           187 : 0080;  -- Mask7:    DW &B10000000
           188 : 0014;  -- StartMask: DW &B10100
           189 : 00FF;  -- AllSonar: DW &B11111111
           18A : 01DC;  -- OneMeter: DW 476        ; one meter in 2.1mm units
           18B : 00EE;  -- HalfMeter: DW 238       ; half meter in 2.1mm units
           18C : 010E;  -- TwoFeet:  DW 270        ; ~2ft in 2.1mm units
           18D : 006E;  -- MinBatt:  DW 110        ; 11V - minimum safe battery voltage
           18E : 1190;  -- I2CWCmd:  DW &H1190     ; write one byte, read one byte, addr 0x90
           18F : 0190;  -- I2CRCmd:  DW &H0190     ; write nothing, read one byte, addr 0x90
  END;
